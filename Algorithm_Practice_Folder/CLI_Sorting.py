import argparse
from datetime import datetime
import numpy as np

# This program is a python program which uses command line input to run different sorting algorithms on a list. 
# This employs one positional argument (sorting_algorithm) and two optional arguments (--user_array and --random_array) to allow the user to generate randomly ordered lists and then sort them based on the specified sorting algorithm. 

# So far the available choices for the sorting_algorithm positional argument are: bubble, selection, and insertion.

# The --user_array argument allows the user to input several numbers in any order to create their own list to pass to the program like so:

# python CLI_Sorting.py "type of sorting algorithm" --user_array "list of random numbers"
# Ex. python CLI_Sorting.py selection --user_array 8 3 6 40 19

# The --random_array argument allows the user to input two numbers to create a randomly generated list through numpy to use as input in the specified sorting algorithm.
# The first input of this argument determines the maximum possible value for an element in the randomly generated list.
# The second input of this argument determines the size of the randomly generated list.
# The way this argument is utilized is as follows:

# python CLI_Sorting.py "type of sorting algorithm" --random_array "maximum possible element value" "size of list"
# Ex. python CLI_Sorting.py bubble --random_array 100 10

# Furthermore, the two optional arguments can be used in tandem to generate two separate lists for sorting and display the results of both to the user.
# One of the way to implement this is as follows:

# python CLI_Sorting.py "type of sorting algorithm" --random_array "maximum possible element value" "size of list" --user_array "list of random numbers"
# python CLI_Sorting.py insertion --random_array 83 12 --user_array 7 2 32 15 66

def OptBubbleSort(list):
    num = len(list)
    for i in range(num):
        swap = False
        for j in range(0, num-i-1):
            if list[j] > list[j+1]:
                list[j],list[j+1] = list[j+1],list[j]
                swap = True
        if swap == False:
            break

def SelectionSort(list):
    num = len(list)
    for i in range(num):
        min_idx = i
        for j in range(i+1,num):
            if list[min_idx] > list[j]:
                min_idx = j
        list[min_idx],list[i] = list[i],list[min_idx]

def InsertionSort(list):
    for i in range(1, len(list)): 
        key = list[i] 
        j = i-1
        while j >= 0 and key < list[j] : 
                list[j + 1] = list[j] 
                j -= 1
        list[j + 1] = key 

parser = argparse.ArgumentParser()
parser.add_argument("sorting_algorithm", help = "Type of sorting algorithm to sort the 'random array'.", choices=["bubble","selection","insertion"])
parser.add_argument("--user_array", help = "Array of randomly ordered numbers input by the user.", nargs="*", type = int)
parser.add_argument("--random_array", help = "Array of randomly ordered numbers generated by the program. Only two arguments should be passed under --random_array. The first argument determines the maximum possible value of the elements in the random array and the second argument determines the size of the array.", nargs="*", type = int)

args = parser.parse_args()

sort = args.sorting_algorithm
values = args.user_array
randarr = args.random_array

if values:
    array = [values[num] for num in range(len(values))]
    init_user_array = array
elif not values:
    array = []

if randarr:
    random_array = np.random.randint(randarr[0], size = randarr[1])
    init_random_array = random_array
elif not randarr:
    random_array = []

# Bubble Sorting CLI Code

if sort == "bubble" and len(array) != 0 and len(random_array) == 0:
    print("\n", "Initial User Array:", "\n", init_user_array)

    start_time = datetime.now()
    OptBubbleSort(array)
    time_elapsed = datetime.now() - start_time

    print("\n", "Bubble Sorted User Array:", "\n", array) 
    print("\n", "Time (in microseconds) elasped while sorting:", "\n", time_elapsed, "\n")

elif sort == "bubble" and len(random_array) != 0 and len(array) == 0:
    print("\n", "Initial Random Array:", "\n", init_random_array)

    start_time = datetime.now()
    OptBubbleSort(random_array)
    time_elapsed = datetime.now() - start_time

    print("\n", "Bubble Sorted Random Array:", "\n", random_array) 
    print("\n", "Time (in microseconds) elasped while sorting:", "\n", time_elapsed, "\n")

elif sort == "bubble" and len(array) != 0 and len(random_array) != 0:
    print("\n", "Initial User Array:", "\n", init_user_array)

    start_time = datetime.now()
    OptBubbleSort(array)
    time_elapsed = datetime.now() - start_time

    print("\n", "Bubble Sorted User Array:", "\n", array) 
    print("\n", "Time (in microseconds) elasped while sorting:", "\n", time_elapsed, "\n") 


    print("\n", "Initial Random Array:", "\n", init_random_array)

    start_time2 = datetime.now()
    OptBubbleSort(random_array)
    time_elapsed2 = datetime.now() - start_time2

    print("\n", "Bubble Sorted Random Array:", "\n", random_array) 
    print("\n", "Time (in microseconds) elasped while sorting:", "\n", time_elapsed2, "\n")

# Selection Sorting CLI Code

if sort == "selection" and len(array) != 0 and len(random_array) == 0:
    print("\n", "Initial User Array:", "\n", init_user_array)

    start_time = datetime.now()
    SelectionSort(array)
    time_elapsed = datetime.now() - start_time

    print("\n", "Selection Sorted User Array:", "\n", array) 
    print("\n", "Time (in microseconds) elasped while sorting:", "\n", time_elapsed, "\n") 

elif sort == "selection" and len(random_array) != 0 and len(array) == 0:
    print("\n", "Initial Random Array:", "\n", init_random_array)

    start_time = datetime.now()
    SelectionSort(random_array)
    time_elapsed = datetime.now() - start_time
    
    print("\n", "Selection Sorted Random Array:", "\n", random_array) 
    print("\n", "Time (in microseconds) elasped while sorting:", "\n", time_elapsed, "\n")

elif sort == "selection" and len(array) != 0 and len(random_array) != 0:
    print("\n", "Initial User Array:", "\n", init_user_array)

    start_time = datetime.now()
    SelectionSort(array)
    time_elapsed = datetime.now() - start_time

    print("\n", "Selection Sorted User Array:", "\n", array) 
    print("\n", "Time (in microseconds) elasped while sorting:", "\n", time_elapsed, "\n")


    print("\n", "Initial Random Array:", "\n", init_random_array)

    start_time2 = datetime.now()
    SelectionSort(random_array)
    time_elapsed2 = datetime.now() - start_time2

    print("\n", "Selection Sorted Random Array:", "\n", random_array) 
    print("\n", "Time (in microseconds) elasped while sorting:", "\n", time_elapsed2, "\n")

# Insertion Sorting CLI Code

if sort == "insertion" and len(array) != 0 and len(random_array) == 0:
    print("\n", "Initial User Array:", "\n", init_user_array)

    start_time = datetime.now()
    InsertionSort(array)
    time_elapsed = datetime.now() - start_time

    print("\n", "Insertion Sorted User Array:", "\n", array) 
    print("\n", "Time (in microseconds) elasped while sorting:", "\n", time_elapsed, "\n") 

elif sort == "insertion" and len(random_array) != 0 and len(array) == 0:
    print("\n", "Initial Random Array:", "\n", init_random_array)

    start_time = datetime.now()
    InsertionSort(random_array)
    time_elapsed = datetime.now() - start_time
    
    print("\n", "Insertion Sorted Random Array:", "\n", random_array) 
    print("\n", "Time (in microseconds) elasped while sorting:", "\n", time_elapsed, "\n")

elif sort == "insertion" and len(array) != 0 and len(random_array) != 0:
    print("\n", "Initial User Array:", "\n", init_user_array)

    start_time = datetime.now()
    InsertionSort(array)
    time_elapsed = datetime.now() - start_time

    print("\n", "Insertion Sorted User Array:", "\n", array) 
    print("\n", "Time (in microseconds) elasped while sorting:", "\n", time_elapsed, "\n")


    print("\n", "Initial Random Array:", "\n", init_random_array)

    start_time2 = datetime.now()
    InsertionSort(random_array)
    time_elapsed2 = datetime.now() - start_time2

    print("\n", "Insertion Sorted Random Array:", "\n", random_array) 
    print("\n", "Time (in microseconds) elasped while sorting:", "\n", time_elapsed2, "\n")